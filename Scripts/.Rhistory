floor(5.7) # funcion piso
ceiling(5.7) # funcion piso
'a'
"a"
im <- 3.5 - 8i # Complejo
Im(im) # Parte imaginaria
Re(im) # Parte real
class(im)
a <- 5 # Expresión
a
a <- 2*a
a
class(a)
fecha <- lubridate::ymd("2010-01-01") # Fecha
data_serie <- ts(1:24, start = 2014) # Serie de tiempo
data_serie
# Crear un factor ordenado
data_factor	<- factor(x= c('alto', 'bajo', 'alto', 'alto'), levels = c('bajo', 'mediano', 'alt'))
data_factor # Mostrar el factor
# Crear un factor ordenado
data_factor	<- factor(x= c('alto', 'bajo', 'alto', 'alto'), levels = c('bajo', 'mediano', 'alto'))
data_factor # Mostrar el factor
(0:3)^ Inf
x <- c("11", '12', '13', "14")
as.numeric(x)
as.integer(im)
as.character(data_factor)
as.factor(x)
parse_number(c("$1,234.5", "$12.45"))
#casos especiales
library(tidyverse)
parse_number(c("$1,234.5", "$12.45"))
parse_double(c("1234.5", "12.45"))
parse_integer(c("$1,234.5", "$12.45")) # Error
as.character(lubridate::now())
factor(c("Alto", "Bajo", "Medio bajo", "Alto"),
levels = c("Alto", "Medio", "Bajo"))
parse_factor(c("Alto", "Bajo", "Medio", "Alto"), levels = c("Alto", "Medio", "Bajo"))
parse_factor(c("Alto", "Bajo", "Medio bajo", "Alto"),  levels = c("Alto", "Medio", "Bajo"))
z <- c('a', 10, 20, 'x')
z
# Crear vector cantidad
cantidad <- 25
# Establecer la declaración is-else
if (cantidad> 20) {
print ('¡Vendiste mucho!')
} else {
print ('No es suficiente para hoy')
}
# Crear
cantidad <- 10
# Crear declaración de condición múltiple
if (cantidad <20) {
print ('No es suficiente para hoy')
} else if (cantidad> 20 & cantidad <= 30) {
print ('Día promedio')
} else {
print ('¡Qué gran día!')
}
categoria <- 'A'
precio <- 10
if (categoria == 'A') {
cat ('Se aplica una tasa de iva del 8%.', 'El precio total es', precio * 1.08)
} else if (categoria == 'B') {
cat ('Se aplica una tasa de iva del 10%.', 'El precio total es', precio * 1.10)
} else {
cat ('Se aplica una tasa de iva del 20%.', ' El precio total es ', precio * 1.20)
}
# Crear fruta vector
fruit <- c ('Manzana', 'Naranja', 'Maracuyá', 'Plátano')
# Crear fruta vector
fruit <- c ('Manzana', 'Naranja', 'Maracuyá', 'Plátano')
# Crear la declaración
for para (i en fruta) {
print (i)
}
# Crear fruta vector
fruit <- c ('Manzana', 'Naranja', 'Maracuyá', 'Plátano')
# Crear la declaración
for (i en fruta) {
print (i)
}
# Crear fruta vector
fruta <- c('Manzana', 'Naranja', 'Maracuyá', 'Plátano')
# Crear la declaración
for (i en fruta) {
print (i)
}
# Crear la declaración
for (i in fruta) {
print (i)
}
# Crear una lista vacia
list <- c()
# Create a for statement to populate the list
for (i in seq(1, 4, by=1)) {
list[[i]] <- i*i
}
print(list)
# Cree una lista con tres vectores
fruit <- list (Basket = c ('Manzana', 'Naranja', 'Maracuyá', 'Plátano'),
Dinero = c (10, 12, 15), compra = FALSO)
# Cree una lista con tres vectores
fruta <- list (Basket = c ('Manzana', 'Naranja', 'Maracuyá', 'Plátano'),
Dinero = c (10, 12, 15), compra = FALSE)
for (p in fruta)
{
print (p)
}
# Cree una lista con tres vectores
fruta <- list (Basket = c ('Manzana', 'Naranja', 'Maracuyá', 'Plátano'),
Dinero = c (10, 12, 15), compra = FALSE)
for (p in fruta)
for (p in fruta) {
print (p)
}
# Create a matrix
mat <- matrix(data = seq(10, 20, by=1), nrow = 6, ncol =2)
# Create the loop with r and c to iterate over the matrix
for (r in 1:nrow(mat))
# Create the loop with r and c to iterate over the matrix
for (r in 1:nrow(mat)) {
for (c in 1:ncol(mat))  {
print(paste("Row", r, "and column",c, "have values of", mat[r,c])) }
}
mat
# Create the loop with r and c to iterate over the matrix
for (r in 1:nrow(mat)) {
for (c in 1:ncol(mat))  {
print(paste("Row", r, "and column",c, "have values of", mat[r,c])) }
}
#Crea una variable con valor 1
comenzar <- 1
#Crea una variable con valor 1
comenzar <- 1
#Crea el bucle
while (comenzar <= 10) {
# Mira quienes somos
cat ('Este es el número de bucle', comienza)
#add 1 a la variable begin después de cada ciclo
comenzar <- comenzar + 1
print (comenzar)
}
#Crea el bucle
while (comenzar <= 10) {
# Mira quienes somos
cat ('Este es el número de bucle', comenzar)
#add 1 a la variable begin después de cada ciclo
comenzar <- comenzar + 1
print (comenzar)
}
#Crea una variable con valor 1
comenzar <- 1
#Crea el bucle
while (comenzar <= 10) {
# Mira quienes somos
cat ('Este es el número de bucle', comenzar)
#add 1 a la variable begin después de cada ciclo
comenzar <- comenzar + 1
print (comenzar)
}
comenzar <- comenzar + 1
#Crea el bucle
while (comenzar <= 10) {
# Mira quienes somos
cat ('Este es el número de bucle', comenzar)
#add 1 a la variable begin después de cada ciclo
print (comenzar)
comenzar <- comenzar + 1
}
#Crea una variable con valor 1
comenzar <- 1
#Crea el bucle
while (comenzar <= 10) {
# Mira quienes somos
cat ('Este es el número de bucle', comenzar)
#add 1 a la variable begin después de cada ciclo
print (comenzar)
comenzar <- comenzar + 1
}
sample(-10:10, 1)
set.seed(123)
# Establecer acciones y precios variables
stock <- 50
precio <- 50
# La variable de bucle cuenta el número de bucles
bucle <- 1
# Establecer la declaración while
while (precio> 45) {
# Crea un precio aleatorio entre 40 y 60
precio <- stock + sample(-10:10, 1)
# Cuente el número de bucle
bucle = bucle +1
# Imprime el número de bucle
imprimir (bucle)
}
# Establecer la declaración while
while (precio> 45) {
# Crea un precio aleatorio entre 40 y 60
precio <- stock + sample(-10:10, 1)
# Cuente el número de bucle
bucle = bucle +1
# Imprime el número de bucle
print (bucle)
}
set.seed(123)
# Establecer acciones y precios variables
stock <- 50
precio <- 50
# La variable de bucle cuenta el número de bucles
bucle <- 1
# Establecer la declaración while
while (precio> 45) {
# Crea un precio aleatorio entre 40 y 60
precio <- stock + sample(-10:10, 1)
# Imprime el número de bucle
print (bucle)
# Cuente el número de bucle
bucle = bucle +1
}
m1 <- matrix(C<-(1:10),nrow=5, ncol=6)
m1
a_m1 <- apply(m1, 2, sum)
a_m1
a_m2 <- apply(m1, 1, sum)
a_m2
movies <- c("SPYDERMAN","BATMAN","VERTIGO","CHINATOWN")
movies_lower <-lapply(movies, tolower)
str(movies_lower)
str(movies_lower) %>% class()
class(movies_lower)
class(movies)
typeof(movies)
str(movies_lower)
#convertir una lista  a vector
movies_lower <-unlist(lapply(movies,tolower))
str(movies_lower)
dt <- cars
dt
lmn_cars <- lapply(dt, min)
lmn_cars
smn_cars <- sapply(dt, min)
smn_cars
lmn_cars
smn_cars
is.vector(lmn_cars)
lmn_cars <- lapply(dt, min)
is.vector(lmn_cars)
is.list(lmn_cars)
is.list(lmn_cars)
class(lmn_cars)
smn_cars <- sapply(dt, min)
class(smn_cars)
class(lmn_cars)
class(smn_cars)
lmxcars <- lapply(dt, max)
smxcars <- sapply(dt, max)
lmxcars
smxcars
avg <- function(x) {
( min(x) + max(x) ) / 2}
fcars <- sapply(dt, avg)
fcars
below_ave <- function(x) {
ave <- mean(x)
return(x[x > ave])
}
dt_s<- sapply(dt, below_ave)
dt_l<- lapply(dt, below_ave)
dt_l
dt_s
data(iris)
tapply(iris$Sepal.Width, iris$Species, median)
integerVector <- function(n) {
v <- c(1:n)
v
}
integerVector( )
integerVector(10)
x <- integerVector(10)
x
integerVectorDef <- function(n = 10) {
v <- c(1:n)
v
}
integerVectorDef <- function(n = 10) {
v <- c(1:n)
v
}
integerVector( )
integerVectorDef <- function(n = 10) {
v <- c(1:n)
v
}
integerVectorDef( )
integerVectorDef(n = 3)
select10 <- function(n) {
v <- c() # crear un vector vacio
for(i in 1:n) { # repetir el proceso n veces
v = rbind(v, sample(1:10, size = 1)) # agregar valores aleatorios al vector v
}
v # valor final devuelto
}
select10()
select10(n = 3)
select10(n = 9)
select10 <- function(n) {
v <- c() # crear un vector vacio
for(i in 1:n) { # repetir el proceso n veces
v = c(v, sample(1:10, size = 1)) # agregar valores aleatorios al vector v
}
v # valor final devuelto
}
select10(n = 3)
select10(n = 9)
selectAny(size = 10, mini = 3, maxi = 10)
selectAny <- function(size, mini, maxi) {
v <- c() # crear un vector vacio
for(i in 1:size) { # repetir hasta "size" veces
v <- rbind(v, sample(mini:maxi, size = 1)) # agregar valores aleatorios al vector v
} # end loop
v # output the vector
}
selectAny(size = 10, mini = 3, maxi = 10)
# Construya una matriz con 5 filas que contengan los números del 1 al 10 y byrow = TRUE
matrix_a <-matrix (1:10, byrow = TRUE, nrow = 5)
matrix_a
# Construya una matriz con 5 filas que contengan los números del 1 al 10 y byrow = FALSE
matrix_b <-matrix(1:10, byrow = FALSE, nrow = 5)
matrix_b
dim (matrix_b)
# Dimensiones de una matriz
dim(matrix_a)
matriz_c <-matriz (1:12, byrow = FALSE, ncol = 3)
matriz_c
matrix_c <-matrix(1:12, byrow = FALSE, ncol = 3)
matrix_c
dim(matrix_c)
# concatenar c (1: 5) a la matriz_a
matrix_a1 <- cbind(matrix_a, c(1:5))
# Check the dimension
dim(matrix_a1)
matrix_a1
matrix_a
matrix_a1
matrix_a2 <-matrix (13:24, byrow = FALSE, ncol = 3)
matrix_a2
matrix_c <-matrix(1:12, byrow = FALSE, ncol = 3)
matrix_c
matrix_a2
matrix_d <- cbind(matrix_a2, matrix_c)
dim(matrix_d)
matrix_d
matrix_c <-matrix(1:12, byrow = FALSE, ncol = 3)
# Crear un vector de 3 valores
add_row <- c(1:3)
# Agregar como fila a la matriz
matrix_c <- rbind(matrix_c, add_row)
dim(matrix_c)
matrix_c
matrix_c[1,2] #selects the element at the first row and second column.
matrix_c[1:3,2:3] #results in a R slice matrix with the data on the rows 1, 2, 3 and columns 2, 3,
#suma
mat1 <- matrix(data = 1:8, nrow = 4, ncol = 4)
mat2 <- matrix(data = 1:16, nrow = 4, ncol = 4)
sum <- mat1 + mat2 #Adding our two matrices
print(sum)
sub <- mat1 - mat2
print(sub) #Printing the sum
prod <- mat1*4
print(prod)
#Multiplicacion de matrices
prod <- mat1*mat2
print(prod)
#Division de matrices
div <- mat1 / mat2 # División de mat1 y mat2
print (div) #Imprimir la división
mat2
mat1
mat1
mat2
div
# Build factor_survey_vector with clean levels
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector
# Generate summary for survey_vector
summary(survey_vector)
# Generate summary for factor_survey_vector
summary(factor_survey_vector)
# Build factor_survey_vector with clean levels
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector
# summary de  survey_vector (vector de caracteres)
summary(survey_vector)
# summary de factor_survey_vector (factor)
summary(factor_survey_vector)
# Build factor_survey_vector with clean levels
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector
# Male
male <- factor_survey_vector[1]
male
# Female
female <- factor_survey_vector[2]
female
# Battle of the sexes: Male 'larger' than female?
male > female
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
# Convert speed_vector to ordered factor vector
factor_speed_vector <- factor(speed_vector, ordered = TRUE, levels = c("slow", "medium", "fast"))
# Print factor_speed_vector
factor_speed_vector
summary(factor_speed_vector)
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
# Convert speed_vector to ordered factor vector
factor_speed_vector <- factor(speed_vector, ordered = TRUE, levels = c("slow", "medium", "fast"))
# Print factor_speed_vector
factor_speed_vector
summary(factor_speed_vector)
# seleccionar nivel 2
da2 <- factor_speed_vector[2]
# seleccionar nivel 5
da5 <- factor_speed_vector[5]
# es el nivel 2 mas rapido que el nivel 5
da2 > da5
data_banco <- read.xlsx("Data_Banco.xlsx", sheet = "Data")
library(openxlsx)
data_banco <- read.xlsx("Data_Banco.xlsx", sheet = "Data")
write.xlsx( mtcars, "Exports/mtcars.xlsx" ) # para guardar datos
data_sucursal <- read.xlsx(xlsxFile = "Data_Banco.xlsx", sheet = "Data_Sucursal")
View(data_sucursal)
View(data_banco)
